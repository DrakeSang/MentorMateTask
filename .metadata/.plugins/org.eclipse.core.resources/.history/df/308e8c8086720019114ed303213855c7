package task;

import java.util.Scanner;

public class MentorMateLogo {

	public static void main(String[] args) {
		Scanner keyboard = new Scanner(System.in);
		
		System.out.print("Enter odd number:");
		if(keyboard.hasNextInt()) {
			int logoWidth = keyboard.nextInt();
			if(logoWidth % 2 == 0) {
				System.out.println("You entered even number.");
			}else {
				String sb = mentorMateLogo(logoWidth);
				System.out.println(sb);
			}
		}else {
			System.out.println("You did not enter number.");
		}
		
		keyboard.close();
	}
	
	public static String mentorMateLogo(int n) {
		StringBuilder sb = new StringBuilder();
		
		int original = n;
		int startingMiddleNumber = n * 2;
		
		String dash = "-";
		String star = "*";
		
		int startingIncrementingValue = original;
		int finalIncrementingValue = 0;
		
		int startingDecreasingValue = original;
		int finalDecreasingValue = 0;
		
		int mediumPart = n * 2;
		
		//Printing top line
		createTopOrBottomLine(
				mediumPart, 
				original, 
				sb, 
				dash,
				star);
		n--;
		
		for(int i = 2; i < original + 1; i += original/2) {
			if(i == 2) {
				for(int j = 1; j <= original/2; j++) {
					startingMiddleNumber = startingMiddleNumber - 2;
					startingIncrementingValue = startingIncrementingValue + 2;
					startingDecreasingValue = startingDecreasingValue - 2;
					printFirstMiddleLines(
							sb,
							n, 
							startingIncrementingValue, 
							startingDecreasingValue,
							startingMiddleNumber,
							dash,
							star);
					finalIncrementingValue = startingIncrementingValue;
					finalDecreasingValue = startingDecreasingValue;
					n--;
					sb.append("\n");
				}
			}else {
				for(int j = i; j <= original; j++) {
					startingMiddleNumber = startingMiddleNumber - 2;
					sb.append(dash.repeat(n));
					sb.append(star.repeat(original));
					sb.append(dash.repeat(finalDecreasingValue));
					sb.append(star.repeat(finalIncrementingValue));
					sb.append(dash.repeat(finalDecreasingValue));
					sb.append(star.repeat(original));
					sb.append(dash.repeat(startingMiddleNumber));
					sb.append(star.repeat(original));
					sb.append(dash.repeat(finalDecreasingValue));
					sb.append(star.repeat(finalIncrementingValue));
					sb.append(dash.repeat(finalDecreasingValue));
					sb.append(star.repeat(original));
					sb.append(dash.repeat(n));
					finalDecreasingValue = finalDecreasingValue + 2;
					finalIncrementingValue = finalIncrementingValue - 2;
					n--;
					sb.append("\n");
				}
			}
		}
		
		//Printing bottom line
		createTopOrBottomLine(
				mediumPart, 
				original, 
				sb,
				star,
				dash);
		
		return sb.toString();
		
	}
	
	public static String printFirstMiddleLines(
			StringBuilder sb,
			int n, 
			int startingIncrementingValue, 
			int startingDecreasingValue,
			int startingMiddleNumber,
			String dash,
			String star) {
		sb.append(dash.repeat(n));
		sb.append(star.repeat(startingIncrementingValue));
		sb.append(dash.repeat(startingDecreasingValue));
		sb.append(star.repeat(startingIncrementingValue));
		sb.append(dash.repeat(startingMiddleNumber));
		sb.append(star.repeat(startingIncrementingValue));
		sb.append(dash.repeat(startingDecreasingValue));
		sb.append(star.repeat(startingIncrementingValue));
		sb.append(dash.repeat(n));
		
		return sb.toString();
	}
	
	public static String createTopOrBottomLine(
			int mediumPart, 
			int n, 
			StringBuilder sb,
			String dash,
			String star) {

		for(int i = 1; i <= 4; i++) {
			if(i % 2 == 0) {
				sb.append(star.repeat(n));
			}else {
				sb.append(dash.repeat(n));
			}
		}
		sb.append(dash.repeat(mediumPart));
		for(int j = 1; j <= 4; j++) {
			if(j % 2 == 0) {
				sb.append(dash.repeat(n));
			}else {
				sb.append(star.repeat(n));
			}
		}
		sb.append("\n");
		
		return sb.toString();		
	}
}